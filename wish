#!/bin/bash

IP="$1"
MAX_WIDTH=80
[[ -z "$IP" ]] && { echo "⚠️  Usage: $0 <IPv4 address>"; exit 1; }
[[ ! "$IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?$ ]] && { echo "🚫 Invalid IPv4 address format."; exit 2; }

# 🧠 Check for private IP ranges
is_private_ip() {
  [[ "$1" =~ ^10\. ]] || [[ "$1" =~ ^172\.(1[6-9]|2[0-9]|3[0-1])\. ]] ||
  [[ "$1" =~ ^192\.168\. ]] || [[ "$1" =~ ^127\. ]] || [[ "$1" =~ ^169\.254\. ]]
}
if is_private_ip "$IP"; then
  echo "🌐 IP Address: $IP"
  echo "⚠️  Private IP (non-routable)"
  exit 0
fi

# 📥 Retrieve WHOIS and geolocation data
whois_output=$(whois "$IP" 2>/dev/null)
ipapi_output=$(curl -s "http://ip-api.com/json/$IP?fields=status,country,city,org,as")

# 🌍 Basic IP details
as_number=$(echo "$whois_output" | grep -Eio '\bAS[0-9]{2,}' | head -n1)
[[ -z "$as_number" ]] && as_number=$(echo "$ipapi_output" | grep -oP '"as":\s*"\K[^"]+')
country=$(echo "$ipapi_output" | grep -oP '"country":\s*"\K[^"]+')
[[ -z "$country" ]] && country=$(echo "$whois_output" | grep -Ei '^country:' | awk -F ':' '{print $2}' | xargs)
city=$(echo "$ipapi_output" | grep -oP '"city":\s*"\K[^"]+')
[[ -z "$city" ]] && city=$(echo "$whois_output" | grep -Ei '^city:' | awk -F ':' '{print $2}' | xargs)
[[ -z "$city" ]] && city=$(echo "$whois_output" | grep -Ei 'address|location|descr' \
  | grep -Eo 'Moscow|Saint[- ]?Petersburg|Novosibirsk|Yekaterinburg|Kazan|Sochi|Omsk|Ufa|Perm|Samara|Rostov|Vladivostok|Krasnoyarsk' \
  | head -n1)

# 🏢 Operator / ISP info
operator_parts=()
descrs=$(echo "$whois_output" | grep -Ei '^descr:' | sed 's/^descr:[ \t]*//' | sort -u)
orgs=$(echo "$whois_output" | grep -Ei 'OrgName|Organization|owner|org-name:' | sed 's/^[^:]*:[ \t]*//' | sort -u)
netname=$(echo "$whois_output" | grep -Ei '^netname:' | sed 's/^netname:[ \t]*//')
api_org=$(echo "$ipapi_output" | grep -oP '"org":\s*"\K[^"]+')

[[ -n "$descrs" ]] && operator_parts+=("$descrs")
[[ -n "$orgs" ]] && operator_parts+=("$orgs")
[[ -n "$netname" ]] && operator_parts+=("$netname")
[[ -n "$api_org" ]] && operator_parts+=("$api_org")
operator=$(printf "%s\n" "${operator_parts[@]}" | grep -Ev 'RIPE|support|assigned|holder|coordination|customers' | sort -u | paste -sd ' / ' - | head -c 160)

# ☎️ Normalize phone numbers
clean_number() { echo "$1" | sed -E 's/[^0-9+]//g' | sed -E 's/^\++/\+/' ; }
normalize_fallback() {
  local raw=$(clean_number "$1")
  local digits="${raw#+}"
  [[ "$digits" =~ ^[0-9]{10,15}$ ]] && echo "+$digits" | sed -E 's/^([0-9]{1,3})([0-9]{2,4})([0-9]{2,4})([0-9]{2,4})/\+\1-\2-\3-\4/'
}
phones_raw=$(echo "$whois_output" | grep -Ei 'Phone:|Org.*Phone:|fax-no:' \
  | sed 's/.*:[ \t]*//' | grep -Eo '\+?[0-9][0-9 ()-]{6,}' | sort -u)
phones=$(echo "$phones_raw" | while IFS= read -r phone; do normalize_fallback "$phone"; done \
  | grep -v '^$' | sort -u | paste -sd ', ' -)

# 📮 Extract emails from all possible blocks
emails_primary=$(echo "$whois_output" \
  | grep -Ei 'E-mail:|Email:|abuse-mailbox:|Org.*Email:|contact:|remarks:' \
  | sed 's/.*:[ \t]*//' \
  | grep -Eo '[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}' \
  | grep -Ev '@(example|whois|ripe|arin|nic|apnic|afrinic|lacnic)\.')
emails_abuse=$(echo "$whois_output" \
  | grep -Eo "is '[^']+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}'" \
  | sed -E "s/is '//;s/'//")
emails=$(echo -e "$emails_primary\n$emails_abuse" \
  | grep -v '^$' | sort -u | paste -sd ', ' -)

# 🌐 Extract websites and filter irrelevant ones
urls=$(echo "$whois_output" | grep -Ei 'Ref:|Comment:|Website:|remarks:' \
  | grep -Eoi 'https?://[^ >"]+' \
  | grep -Ev 'example\.com|whois\.|rdap\.|docs\.|nic\.|ripe\.net|arin\.net|apnic\.net' \
  | sort -u | paste -sd ', ' -)

wrap_text() { local label="$1"; local text="$2"; [[ -n "$text" ]] && echo "$label: $text" | fmt -w $MAX_WIDTH; }

# 🎬 Final output
echo "🌐 IP Address: $IP"
echo "🛡️  AS Number: ${as_number:-N/A}"
echo "🗺️  Country: ${country:-N/A}"
echo "🏙️  City: ${city:-N/A}"
echo "🏢 Operator: ${operator:-N/A}"
echo ""
echo "📇 Contacts"
wrap_text "📞 Phone" "$phones"
wrap_text "✉️  E-mail" "$emails"
wrap_text "🔗 Website" "$urls"
[[ -z "$phones" && -z "$emails" && -z "$urls" ]] && echo "⚠️  No useful contact information found"


